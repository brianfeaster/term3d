#!/bin/bash

##
## Poor man's console 3d lib
##

## Concepts:
##
##  * Vectors and matrices are just bash arrays and passed by value as individual args or quoted args.
##  * Everything's fixed point because bash math has no floating math support.
##  * Unit circle radius=120
##  * Radian SINTABLE 120 in size
##  * Presume +Z extends beyond screen away from viewer.
##
## Arrays vs function arguments:
##
##  Although you can pass an array as a symbolic reference to a function as 'ary[@]'
##  then copy it locally with myary=(${!1}), it's faster just to pass the array around
##  as an expanded list of values "${ary[*]}" and copied locally with myary=($1) or
##  just used directly and consumed along with shift which seems to be the fastest.
##
## Depth-buffer
##
##  Up until now the z coordinate has been ignored as a form of 2d projection.  Now it
##  needs to be considered when determining depth for inclusion into the the z-buffer
##  array.  The line drawing algorithm will just compute the z coordinate given either
##  the x (slope between -1 and 1) or y (slope beyond -1 or 1).  There may be a DDA
##  method that will be faster but for now this should suffice.


##
## Math stuff.  Mappings from [0..120] -> [-120..120]
##
SINTABLE=(0 6 12 18 25 31 37 43 49 54 60 65 70 75 80 85 89 93 97 101 104 107 110 112 114 116 117 119 119 120 120 120 119 119 117 116 114 112 110 107 104 101 97 93 89 85 80 75 70 65 60 54 49 43 37 31 25 18 12 6 0 -6 -12 -18 -25 -31 -37 -43 -49 -54 -60 -65 -70 -75 -80 -85 -89 -93 -97 -101 -104 -107 -110 -112 -114 -116 -117 -119 -119 -120 -120 -120 -119 -119 -117 -116 -114 -112 -110 -107 -104 -101 -97 -93 -89 -85 -80 -75 -70 -65 -60 -54 -49 -43 -37 -31 -25 -18 -12 -6)
SINTABLEI=(0 -6 -12 -18 -25 -31 -37 -43 -49 -54 -60 -65 -70 -75 -80 -85 -89 -93 -97 -101 -104 -107 -110 -112 -114 -116 -117 -119 -119 -120 -120 -120 -119 -119 -117 -116 -114 -112 -110 -107 -104 -101 -97 -93 -89 -85 -80 -75 -70 -65 -60 -54 -49 -43 -37 -31 -25 -18 -12 -6 0 6 12 18 25 31 37 43 49 54 60 65 70 75 80 85 89 93 97 101 104 107 110 112 114 116 117 119 119 120 120 120 119 119 117 116 114 112 110 107 104 101 97 93 89 85 80 75 70 65 60 54 49 43 37 31 25 18 12 6)
COSTABLE=(120 120 119 119 117 116 114 112 110 107 104 101 97 93 89 85 80 75 70 65 60 54 49 43 37 31 25 18 12 6 0 -6 -12 -18 -25 -31 -37 -43 -49 -54 -60 -65 -70 -75 -80 -85 -89 -93 -97 -101 -104 -107 -110 -112 -114 -116 -117 -119 -119 -120 -120 -120 -119 -119 -117 -116 -114 -112 -110 -107 -104 -101 -97 -93 -89 -85 -80 -75 -70 -65 -60 -54 -49 -43 -37 -31 -25 -18 -12 -6 0 6 12 18 25 31 37 43 49 54 60 65 70 75 80 85 89 93 97 101 104 107 110 112 114 116 117 119 119 120)
COSTABLEI=(-120 -120 -119 -119 -117 -116 -114 -112 -110 -107 -104 -101 -97 -93 -89 -85 -80 -75 -70 -65 -60 -54 -49 -43 -37 -31 -25 -18 -12 -6 0 6 12 18 25 31 37 43 49 54 60 65 70 75 80 85 89 93 97 101 104 107 110 112 114 116 117 119 119 120 120 120 119 119 117 116 114 112 110 107 104 101 97 93 89 85 80 75 70 65 60 54 49 43 37 31 25 18 12 6 0 -6 -12 -18 -25 -31 -37 -43 -49 -54 -60 -65 -70 -75 -80 -85 -89 -93 -97 -101 -104 -107 -110 -112 -114 -116 -117 -119 -119 -120)


##
## Time stuff
##
## Consider time as normalized values:  hours [0..240] minuts & seconds [0..120].
## I do this because the above trig function domains are [0..120].
##
hour=0
min=0
sec=0
function timeProbe {
  local h m s
  if [ $# == 1 ]; then
    read h m s <<< $(date -r $1 +'%H %M %S')
  else
    read h m s  <<< $(date +'%H %M %S')
  fi
  hour=$((10#$h * 10)) #10# forces base 10 values otherwise octal 09 can't be parsed.
  min=$((10#$m * 2))
  sec=$((10#$s * 2))
}
timeProbe $(date +'%H %M %S')

##
## Terminal stuff
##
TWIDTH=80
TWIDTH2=40
THEIGHT=25
THEIGHT2=13
function hex { printf "%02x" $1; }
# UTF-8 critter glyphs
function acritter { printf "\xf0\x9f\x90\x${1:-$(hex $((128+RANDOM%64)))}"; }
function resetCritters {
  animal1=$(acritter)
  animal2=$(acritter)
  animal3=$(acritter)
}
resetCritters

function terminalProbe {
  read THEIGHT TWIDTH <<<$(stty size);
  THEIGHT2=$((THEIGHT/2))
  TWIDTH2=$((TWIDTH/2))
}

function terminalIsInScreen { # ARGS: x y
  local x=$(($1+TWIDTH2))
  local y=$(($2+THEIGHT2))
  if [ $x -lt 1 ] || [ $y -lt 1 ] || [ $TWIDTH -lt $x ] || [ $THEIGHT -lt $y ]; then
    return 1
  fi
  return 0
}

function G2 { printf "\e[$(($1+THEIGHT2));$(($2+TWIDTH2))H$3"; }

function terminalDrawLine {
  local x y m n d dx dy w ws nx ny yyxx e i
  # Make sure line is drawn from left -x to right +x in the temrinal.
  if [ $2 -le $4 ]; then
    x=$2; y=$1; m=$4; n=$3
  else
    x=$4; y=$3; m=$2; n=$1
  fi
  # (x,y) to (m,n) will always go left to right
  dx=$((m-x))
  if [ $1 -lt $3 ]; then dy=$(($3-$1)); else dy=$(($1-$3)); fi

  # Always walk or walk-step

  if [ $dy -lt $dx ]; then # Small slope so walk left and step up or down
    w=''; xwi=1;  ywi=0
    if [ $y -lt $n ]; then # walk right and down
       ws=$'\v'; xwsi=1; ywsi=1
    else                   # walk right and up
       ws=$'\eM'; xwsi=1; ywsi=-1
    fi
    nx=$dx
    ny=$dy
  else # Large slope, so walk up or down and step right
    if [ $y -lt $n ]; then # walk down and right
       w=$'\b\v'; xwi=0; ywi=1
       ws=$'\v'; xwsi=1; ywsi=1
    else                   # walk up and right
       w=$'\b\eM'; xwi=0; ywi=-1
       ws=$'\eM'; xwsi=1; ywsi=-1
    fi
    nx=$dy
    ny=$dx
  fi

  # Valid state when drawing lines on the terminal
  #  0 = out
  #  1 = in
  local state=0

  yy=$((ny + ny))
  yyxx=$((yy - nx - nx))
  e=$((yy - nx))
  i=$nx

  while [ 0 -lt $i ]; do
    if [ 0 -le $e ]; then
      if [ $state == 1 ]; then
        terminalIsInScreen $x $y || { # done if out of screen
           return 0
        }
        printf "$ws$5"
      else # state == 0
        if terminalIsInScreen $x $y; then
          G2 $y $x $5
          state=1
        fi
      fi
      x=$((x+xwsi)); y=$((y+ywsi))
      e=$((e + yyxx))
    else
      if [ $state == 1 ]; then
        terminalIsInScreen $x $y || { # done if out of screen
          return 0
        }
        printf $w$5
      else # state == 0
        if terminalIsInScreen $x $y
          then G2 $y $x $5
          state=1
        fi
      fi
      x=$((x+xwi)); y=$((y+ywi))
      e=$((e + yy))
    fi
    i=$((i-1))
  done
}


##
## Debugging
##
dv   (){ while [ 0 -lt $# ]; do printf '[%6d %6d %6d %6d]\n' $1 $2 $3 $4; shift 4; done; }
dvn  (){ while [ 0 -lt $# ]; do printf '[%6d %6d %6d %6d | %6d]\n' $(($1/$4)) $(($2/$4)) $(($3/$4)) $(($4/$4)) $4; shift 4; done; }
dm4  (){ printf '[%6d %6d %6d %6d]\n' $1 $2 $3 $4 $5 $6 $7 $8 $9 ${10} ${11} ${12} ${13} ${14} ${15} ${16}; }
COLORS=('0' '0;31' '0;32' '0;33' '0;34' '0;35' '0;36' '0;37' '1;30' '1;31' '1;32' '1;33' '1;34' '1;35' '1;36' '1;37')
function PC { local c=$1; shift; printf "\e[${COLORS[c]}m$*"; }



##
## Matrix
##

identity="1 0 0 0  0 1 0 0   0 0 1 0  0 0 0 1"
function matRotz () { echo ${COSTABLE[(120+$1)%120]} ${SINTABLEI[(120+$1)%120]} 0 0 ${SINTABLE[(120+$1)%120]} ${COSTABLE[(120+$1)%120]} 0 0 0 0 120 0 0 0 0 120; }
function matRoty () { echo ${COSTABLE[(120+$1)%120]} 0 ${SINTABLEI[(120+$1)%120]} 0 0 120 0 0 ${SINTABLE[(120+$1)%120]} 0 ${COSTABLE[(120+$1)%120]} 0 0 0 0 120; }
function matRotx () { echo 120 0 0 0 0 ${COSTABLE[(120+$1)%120]} ${SINTABLE[(120+$1)%120]} 0 0   ${SINTABLEI[(120+$1)%120]} ${COSTABLE[(120+$1)%120]} 0 0 0 0 120; }
function matScale () { echo $1 0 0 0  0 $2 0 0  0 0 $3 0  0 0 0 1; }
function matTrans () { echo 1 0 0 $1  0 1 0 $2  0 0 1 $3  0 0 0 1; }
function matPerspective () { echo 1000 0 0 0  0 1000 0 0  0 0 1000 0  0 0 $((1000/$1)) 1000; }

#
# Multiply 4x4 row vector arg1 with 4xN column vector (remaining args).
#  Arg1 = 'a b c d  e f g h  i j k l  m n o p'
#  Arg* = x0 y0 z0 1  x1 y1 z1 1  ...
#
function matMult () {
  local a=$1 b=$2 c=$3 d=$4 e=$5 f=$6 g=$7 h=$8 i=$9 j=${10} k=${11} l=${12} m=${13} n=${14} o=${15} p=${16}
  shift 12
  while [ 8 -le $# ] && shift 4; do
    echo $((a*$1+b*$2+c*$3+d*$4)) $((e*$1+f*$2+g*$3+h*$4)) $((i*$1+j*$2+k*$3+l*$4)) $((m*$1+n*$2+o*$3+p*$4))
  done
}


#
# Multiply N 4x4 row vectors passed as non-grouped expanded args
#  Args: a b c d  e f g h  i j k l  m n o p ...
#
function matMultXform () {
 local aa bb cc dd ee ff gg hh ii jj kk ll mm nn oo pp
 local a=$1 b=$2 c=$3 d=$4 e=$5 f=$6 g=$7 h=$8 i=$9 j=${10} k=${11} l=${12} m=${13} n=${14} o=${15} p=${16}
 shift 16
 while :; do
   aa=$((a*$1 + b*$5 + c*$9    + d*${13}))
    bb=$((a*$2 + b*$6 + c*${10} + d*${14}))
     cc=$((a*$3 + b*$7 + c*${11} + d*${15}))
      dd=$((a*$4 + b*$8 + c*${12} + d*${16}))
   ee=$((e*$1 + f*$5 + g*$9    + h*${13}))
    ff=$((e*$2 + f*$6 + g*${10} + h*${14}))
     gg=$((e*$3 + f*$7 + g*${11} + h*${15}))
      hh=$((e*$4 + f*$8 + g*${12} + h*${16}))
   ii=$((i*$1 + j*$5 + k*$9    + l*${13}))
    jj=$((i*$2 + j*$6 + k*${10} + l*${14}))
     kk=$((i*$3 + j*$7 + k*${11} + l*${15}))
      ll=$((i*$4 + j*$8 + k*${12} + l*${16}))
   mm=$((m*$1 + n*$5 + o*$9    + p*${13}))
    nn=$((m*$2 + n*$6 + o*${10} + p*${14}))
     oo=$((m*$3 + n*$7 + o*${11} + p*${15}))
      pp=$((m*$4 + n*$8 + o*${12} + p*${16}))
   if [ 16 -eq $# ]; then echo $aa $bb $cc $dd $ee $ff $gg $hh $ii $jj $kk $ll $mm $nn $oo $pp; return; fi
   shift 16
   a=$((aa*$1 + bb*$5 + cc*$9    + dd*${13}))
    b=$((aa*$2 + bb*$6 + cc*${10} + dd*${14}))
     c=$((aa*$3 + bb*$7 + cc*${11} + dd*${15}))
      d=$((aa*$4 + bb*$8 + cc*${12} + dd*${16}))
   e=$((ee*$1 + ff*$5 + gg*$9    + hh*${13}))
    f=$((ee*$2 + ff*$6 + gg*${10} + hh*${14}))
     g=$((ee*$3 + ff*$7 + gg*${11} + hh*${15}))
      h=$((ee*$4 + ff*$8 + gg*${12} + hh*${16}))
   i=$((ii*$1 + jj*$5 + kk*$9    + ll*${13}))
    j=$((ii*$2 + jj*$6 + kk*${10} + ll*${14}))
     k=$((ii*$3 + jj*$7 + kk*${11} + ll*${15}))
      l=$((ii*$4 + jj*$8 + kk*${12} + ll*${16}))
   m=$((mm*$1 + nn*$5 + oo*$9    + pp*${13}))
    n=$((mm*$2 + nn*$6 + oo*${10} + pp*${14}))
     o=$((mm*$3 + nn*$7 + oo*${11} + pp*${15}))
      p=$((mm*$4 + nn*$8 + oo*${12} + pp*${16}))
   if [ 16 -eq $# ]; then echo $a $b $c $d $e $f $g $h $i $j $k $l $m $n $o $p; return; fi
   shift 16
 done
}


#
# Given args: x y z n   x' y' z' n'   x" y" z" n"
# Which define two vectors starting at x y z,
# Return true if the normal is facing viewer
#
function isFacing () {
  local zx=$(($1/$4)) zy=$(($2/$4))
  [ $((($5/$8-zx)*(${10}/${12}-zy) - ($6/$8-zy)*($9/${12}-zx))) -lt 0 ]
}


function plotLines () {
  local glyph=$1
  shift
  while [ 0 -lt $# ]; do
    x=$(($1/$4))
    y=$(($2/$4))
    x1=$(($5/$8))
    y1=$(($6/$8))
    terminalDrawLine  $y $x $y1 $x1 "$glyph"
    shift 8
  done
}

function plotPoly () {
  local x y z sx sy sz lx ly lz
  local glyph=$1
  shift
  fx=$(($1/$4)) # First point is also the last point to draw
  fy=$(($2/$4))
  lx=$fx
  ly=$fy
  while [ 8 -le $# ] && shift 4; do
    x=$(($1/$4))
    y=$(($2/$4)) # next point
    terminalDrawLine  $ly $lx $y $x "$glyph"
    lx=$x # last point
    ly=$y
  done
  terminalDrawLine $ly $lx $fy $fx "$glyph"
}

function plotPoints () {
  local x y z i=0 #ary="NOMINUM"
  local  ch=$1 # character to plot
  shift
  while [ 0 -lt $# ]; do
     # Normalize
     x=$(($1/$4))
     y=$(($2/$4))
     #terminalIsInScreen $x $y  &&  G2 $y $x ${ary:i%${#ary}:1}
     terminalIsInScreen $x $y  &&  G2 $y $x $ch
     i=$((i+1))
    shift 4
  done
}



# Object descriptor and vertex stores
glabels=()
gnormals=()
gpoints=()

# Keep track of sets of points.  args: label char color type normal-pointes points...
function makePoints {
  local currentElementCount=${#gpoints[@]}
  local newElementCount=$(($#-16)) # Don't count the non-vectors and normal vectors
  glabels=("${glabels[@]}" "$1 $2 $3 $4 $currentElementCount $((currentElementCount+newElementCount))"); shift 4
  gnormals=(${gnormals[@]} $1 $2 $3 $4  $5 $6 $7 $8  $9 ${10} ${11} ${12}); shift 12
  gpoints=(${gpoints[@]} $*)
}



##
## Globals
##
powerButton=true
frame=0 # Final plotting scale
startTime=$(($(date +%s)-1))
matrixPerspective=$(matMultXform $(matPerspective 60) $(matTrans 0 0 150) $(matScale 2 2 2))


##
## Rendering and Scheduling
##
function renderobjectset {
  while [ 0 -lt $# ]; do
    read n c k t a b <<<${glabels[$1]}
    shift
    PC $k
    case $t in 
      (y) plotPoly   "$c" $(matMult $mat ${gpoints[*]:$a:$b-$a}) ;;
      (l) plotLines  "$c" $(matMult $mat ${gpoints[*]:$a:$b-$a}) ;;
      (p) plotPoints "$c" $(matMult $mat ${gpoints[*]:$a:$b-$a}) ;;
    esac
  done
}

function renderObjects {
  [ $sec == 0 ] || [ "$1" == -resetCritters ] && resetCritters # Animal glyphs reset every minute or screen resize.
  local mat=$(matMultXform $matrixPerspective $(matRotx $((-9))) $(matTrans 0 0 0) $(matRoty $((frame)) ) )
  local norms=($(matMult $mat ${gnormals[@]}))
  local ii count=0 facing=0 thread=0
  for i in $(eval "echo {0..$((${#glabels[@]}-1))}"); do
    if isFacing ${norms[@]:$i*12:12}; then
      facing=$((facing+1))
      count=$((count+1))
      ii="$ii $i"
      if [ 0 -lt $count ]; then # more things happen per thread the higher this number is
        thread=$((thread+1))
        renderobjectset $ii > "$thread" &
        count=0
        ii=""
      fi
    fi
  done
  [ 0 -lt $count ] && {
    thread=$((thread+1))
    renderobjectset $ii > "$thread" &
  }
  frameRate=$((100*frame/($(date +%s)-startTime)))
  if [ $thread != 0 ]; then
    wait # for all the rendering child processes to finish
    printf $(
      printf "\e[2J"
      cat $(eval "echo {1..$thread}")
    )
    PC 8 "\e[2Hframe:$frame\nfps:$((frameRate/100)).$((frameRate%100))\nobjs:$facing\nthreads:$thread"
    rm  $(eval "echo {1..$thread}")
  fi 
  frame=$((frame+1))
}


##
## Models
##

function buildClockCube {
  local r=$1
  local box="-$1 $1 0 1  $1 $1 0 1  -$1 -$1 0 1   $r -$r 0 1    -$r -$r 0 1    -$r $r 0 1    $r $r 0 1 "
  # Transformation matrices that orient a face to either of the 6 cube faces.
  local matrixCubeFacea=$(matMultXform $(matRoty 0)  $(matTrans 0 0 -$r))
  local matrixCubeFaceb=$(matMultXform $(matRoty 30) $(matTrans 0 0 -$r))
  local matrixCubeFacec=$(matMultXform $(matRoty 60) $(matTrans 0 0 -$r))
  local matrixCubeFaced=$(matMultXform $(matRoty 90) $(matTrans 0 0 -$r))
  local matrixCubeFacee=$(matMultXform $(matRotx 30) $(matTrans 0 0 -$r))
  local matrixCubeFacef=$(matMultXform $(matRotx 90) $(matTrans 0 0 -$r))
  local boxa=$(matMult $matrixCubeFacea $box)
  local boxb=$(matMult $matrixCubeFaceb $box)
  local boxc=$(matMult $matrixCubeFacec $box)
  local boxd=$(matMult $matrixCubeFaced $box)
  local boxe=$(matMult $matrixCubeFacee $box)
  local boxf=$(matMult $matrixCubeFacef $box)
  # These three non-displayed points define two vectors that
  # are used to compute the "is facing us" normal vector.
  function normalBasis {
    echo "-$1 $1 0 1  $1 $1 0 1  -$1 -$1 0 1 "
  }
  function makeHand { echo 0 $((-$1*r/10)) 0 1  0 $((-$2*r/10)) 0 1; }
  twelve=$(echo  $(normalBasis $r); makeHand 2 8)
  myclock=$(echo $(normalBasis $r); for s in 10 20 30 40 50 60 70 80 90 100 110; do matMult $(matRotz s) $(makeHand 2 7); done )
  mymin=$(echo   $(normalBasis $r); matMult $(matRotz              $min) $(makeHand 0 7))
  myhour=$(echo  $(normalBasis $r); matMult $(matRotz  $((hour+min/12))) $(makeHand 2 4))
  mysec=$(echo   $(normalBasis $r); matMult $(matRotz              $sec) $(makeHand 6 7))

  #makePoints FLOOR    \# 4 y $(matMult $(matMultXform $(matRotx 30) $(matTrans 0 0 $r)) -55 55 0 1  55 55 0 1  -55 -55 0 1   55 -55 0 1    -55 -55 0 1    -55 55 0 1    55 55 0 1)

  makePoints A        \# 9 y $boxa
  makePoints clock    \. 8 l  $(matMult      $matrixCubeFacea $myclock)
  makePoints twelve   \. 15 l $(matMult      $matrixCubeFacea $twelve)
  makePoints handmin  $animal1 6 l $(matMult $matrixCubeFacea $mymin)
  makePoints handhour $animal2 2 l $(matMult $matrixCubeFacea $myhour)
  makePoints handsec  $animal3 5 l $(matMult $matrixCubeFacea $mysec)
 
  makePoints B        \# 10 y $boxb
  makePoints clock    \. 8  l $(matMult       $matrixCubeFaceb $myclock)
  makePoints twelve   \. 15 l $(matMult       $matrixCubeFaceb $twelve)
  makePoints handmin  $animal1 6  l $(matMult $matrixCubeFaceb $mymin)
  makePoints handhour $animal2 2  l $(matMult $matrixCubeFaceb $myhour)
  makePoints handsec  $animal3 5  l $(matMult $matrixCubeFaceb $mysec)

  makePoints C        \# 12 y $boxc
  makePoints clock    \. 8  l $(matMult       $matrixCubeFacec $myclock)
  makePoints twelve   \. 15 l $(matMult       $matrixCubeFacec $twelve)
  makePoints handmin  $animal1 6  l $(matMult $matrixCubeFacec $mymin)
  makePoints handhour $animal2 2  l $(matMult $matrixCubeFacec $myhour)
  makePoints handsec  $animal3 5  l $(matMult $matrixCubeFacec $mysec)

  makePoints D        \# 14 y $boxd
  makePoints clock    \. 8  l $(matMult       $matrixCubeFaced $myclock)
  makePoints twelve   \. 15 l $(matMult       $matrixCubeFaced $twelve)
  makePoints handmin  $animal1 6  l $(matMult $matrixCubeFaced $mymin)
  makePoints handhour $animal2 2  l $(matMult $matrixCubeFaced $myhour)
  makePoints handsec  $animal3 5  l $(matMult $matrixCubeFaced $mysec)

  makePoints E        \# 11 y $boxe
  makePoints clock    \. 8  l $(matMult       $matrixCubeFacee $myclock)
  makePoints twelve   \. 15 l $(matMult       $matrixCubeFacee $twelve)
  makePoints handmin  $animal1 6  l $(matMult $matrixCubeFacee $mymin)
  makePoints handhour $animal2 2  l $(matMult $matrixCubeFacee $myhour)
  makePoints handsec  $animal3 5  l $(matMult $matrixCubeFacee $mysec)

  makePoints F        \# 13 y $boxf
  makePoints clock    \. 8  l $(matMult       $matrixCubeFacef $myclock)
  makePoints twelve   \. 15 l $(matMult       $matrixCubeFacef $twelve)
  makePoints handmin  $animal1 6  l $(matMult $matrixCubeFacef $mymin)
  makePoints handhour $animal2 2  l $(matMult $matrixCubeFacef $myhour)
  makePoints handsec  $animal3 5  l $(matMult $matrixCubeFacef $mysec)
}

function buildBoxes {
  r=$1
  d=$2
  local box="-$1 $1 0 1  $1 $1 0 1  -$1 -$1 0 1   $r -$r 0 1    -$r -$r 0 1    -$r $r 0 1    $r $r 0 1 "
  local matrixCubeFacea=$(matMultXform $(matRoty 0)  $(matTrans 0 0 -$r))
  local matrixCubeFaceb=$(matMultXform $(matRoty 30) $(matTrans 0 0 -$r))
  local matrixCubeFacec=$(matMultXform $(matRoty 60) $(matTrans 0 0 -$r))
  local matrixCubeFaced=$(matMultXform $(matRoty 90) $(matTrans 0 0 -$r))
  local matrixCubeFacee=$(matMultXform $(matRotx 30) $(matTrans 0 0 -$r))
  local matrixCubeFacef=$(matMultXform $(matRotx 90) $(matTrans 0 0 -$r))
  local boxa=$(matMult $matrixCubeFacea $box)
  local boxb=$(matMult $matrixCubeFaceb $box)
  local boxc=$(matMult $matrixCubeFacec $box)
  local boxd=$(matMult $matrixCubeFaced $box)
  local boxe=$(matMult $matrixCubeFacee $box)
  local boxf=$(matMult $matrixCubeFacef $box)
  makePoints A        $animal1 9 y $(matMult $(matTrans 0 0 -$d) $boxa)
  makePoints A        $animal1 9 y $(matMult $(matTrans 0 0 -$d) $boxb)
  makePoints A        $animal1 9 y $(matMult $(matTrans 0 0 -$d) $boxc)
  makePoints A        $animal1 9 y $(matMult $(matTrans 0 0 -$d) $boxd)
  makePoints A        $animal1 9 y $(matMult $(matTrans 0 0 -$d) $boxe)
  makePoints A        $animal1 9 y $(matMult $(matTrans 0 0 -$d) $boxf)

  makePoints A        @ 4 y $(matMult $(matTrans 0 0 $d) $boxa)
  makePoints A        @ 4 y $(matMult $(matTrans 0 0 $d) $boxb)
  makePoints A        @ 4 y $(matMult $(matTrans 0 0 $d) $boxc)
  makePoints A        @ 4 y $(matMult $(matTrans 0 0 $d) $boxd)
  makePoints A        @ 4 y $(matMult $(matTrans 0 0 $d) $boxe)
  makePoints A        @ 4 y $(matMult $(matTrans 0 0 $d) $boxf)

  makePoints A        $animal3 5 y $(matMult $(matTrans 0 $d 0) $boxa)
  makePoints A        $animal3 5 y $(matMult $(matTrans 0 $d 0) $boxb)
  makePoints A        $animal3 5 y $(matMult $(matTrans 0 $d 0) $boxc)
  makePoints A        $animal3 5 y $(matMult $(matTrans 0 $d 0) $boxd)
  makePoints A        $animal3 5 y $(matMult $(matTrans 0 $d 0) $boxe)
  makePoints A        $animal3 5 y $(matMult $(matTrans 0 $d 0) $boxf)

  makePoints A        \# 8 y $(matMult $(matTrans 0 -$d 0) $boxa)
  makePoints A        \# 8 y $(matMult $(matTrans 0 -$d 0) $boxb)
  makePoints A        \# 8 y $(matMult $(matTrans 0 -$d 0) $boxc)
  makePoints A        \# 8 y $(matMult $(matTrans 0 -$d 0) $boxd)
  makePoints A        \# 8 y $(matMult $(matTrans 0 -$d 0) $boxe)
  makePoints A        \# 8 y $(matMult $(matTrans 0 -$d 0) $boxf)

  makePoints A        \# 6 y $(matMult $(matTrans -$d 0 0) $boxa)
  makePoints A        \# 6 y $(matMult $(matTrans -$d 0 0) $boxb)
  makePoints A        \# 6 y $(matMult $(matTrans -$d 0 0) $boxc)
  makePoints A        \# 6 y $(matMult $(matTrans -$d 0 0) $boxd)
  makePoints A        \# 6 y $(matMult $(matTrans -$d 0 0) $boxe)
  makePoints A        \# 6 y $(matMult $(matTrans -$d 0 0) $boxf)

  makePoints A        \# 6 y $(matMult $(matTrans $d 0 0) $boxa)
  makePoints A        \# 6 y $(matMult $(matTrans $d 0 0) $boxb)
  makePoints A        \# 6 y $(matMult $(matTrans $d 0 0) $boxc)
  makePoints A        \# 6 y $(matMult $(matTrans $d 0 0) $boxd)
  makePoints A        \# 6 y $(matMult $(matTrans $d 0 0) $boxe)
  makePoints A        \# 6 y $(matMult $(matTrans $d 0 0) $boxf)
}

function buildTexturedCubes {
  local r=$1 # radius of the cubes
  local s=$2 # distance between cubes
  local d=$3 # density of the cubes
  function buildTexturedFace {
    local  x  y=$((-r/d))
    echo -$r $r 0 1   $r $r 0 1   -$r -$r 0 1
    while [ $y -le $((r/d)) ]; do
      x=$((-r/d))
      while [ $x -le $((r/d)) ]; do
        echo -n "$((d*x)) $((d*y)) 0 1 "
        x=$((x+1))
      done
      y=$((y+1))
    done
  }
  function buildFaceRotation {
    case $1 in
      ( 0 ) matMultXform $(matTrans $1 $2 $3) $(matRoty  0) $(matTrans 0 0 -$r) ;;
      ( 1 ) matMultXform $(matTrans $1 $2 $3) $(matRoty 30) $(matTrans 0 0 -$r) ;;
      ( 2 ) matMultXform $(matTrans $1 $2 $3) $(matRoty 60) $(matTrans 0 0 -$r) ;;
      ( 3 ) matMultXform $(matTrans $1 $2 $3) $(matRoty 90) $(matTrans 0 0 -$r) ;;
      ( 4 ) matMultXform $(matTrans $1 $2 $3) $(matRotx 30) $(matTrans 0 0 -$r) ;;
      ( 5 ) matMultXform $(matTrans $1 $2 $3) $(matRotx 90) $(matTrans 0 0 -$r) ;;
    esac
  }
  function buildTexturedCube {
    makePoints A o 4 p $(matMult $(buildFaceRotation 0 $1 $2 $3) $(buildTexturedFace))
    makePoints B o 5 p $(matMult $(buildFaceRotation 1 $1 $2 $3) $(buildTexturedFace))
    makePoints C o 6 p $(matMult $(buildFaceRotation 2 $1 $2 $3) $(buildTexturedFace))
    makePoints D o 7 p $(matMult $(buildFaceRotation 3 $1 $2 $3) $(buildTexturedFace))
    makePoints E o 3 p $(matMult $(buildFaceRotation 4 $1 $2 $3) $(buildTexturedFace))
    makePoints F o 2 p $(matMult $(buildFaceRotation 5 $1 $2 $3) $(buildTexturedFace))
  }
  buildTexturedCube -$s  0   0
  buildTexturedCube  $s  0   0
  buildTexturedCube   0  $s  0
  buildTexturedCube   0 -$s  0
} # buildTexturedCubes 


##
## USAGE:  basciiclock [a|b] {frame count}
##
once=true
function main {
  function main_sigint { powerButton=false; }
  function main_sigwinch { terminalProbe; renderObjects -resetCritters; }
  framestop=${2:--1}
  printf "\e[?25l" # Disable cursor
  terminalProbe
  resetCritters
  trap main_sigint   SIGINT
  trap main_sigwinch SIGWINCH
  case $1 in (a)
    while $powerButton && [ $frame != $framestop ] ; do
      # Recompute models.  They might be time dependent like a real-time analog clock.
      if $once && [ "$jiffy" != $(date +%s) ]; then
        once=false
        jiffy=$(date +%s)
        timeProbe # $((frame*483))
        glabels=()
        gnormals=()
        gpoints=()
        buildClockCube 30
      fi
      renderObjects
    done
  ;; (b)
    buildBoxes 8 20
    #buildTexturedCubes 10 30 3
    while $powerButton && [ $frame != $framestop ] ; do
      renderObjects
    done
  ;; esac
  printf "\e[?25h" # Enable cursor
}

#time main b 30 # Time run 60 frames
main b # Run indefinitely or until ^C
